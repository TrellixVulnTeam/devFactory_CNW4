NoSQL

기존 RDMBS
- 트랜잭션을 통한 안정적인 데이터 관리에 초점

@RDBMS의 문제
1. 스키마가 고정되어 있음
- 데이터 속성이 고정되어 있으면 바꾸기 어려움
  > 빅데이터는 계속 데이터가 추가되는데, 기존의 데이터 타입과 맞지 않을 수 있다.
  
2. JOIN
- 많은 양의 데이터에 복잡한 연산을 수행해야 하기 때문에 비용이 많이 들며 파티션을 넘어서는 동작하지 않는다.

3. ACID
- Atomicity (원자성) : All or Nothing
- Consistency (일관성) : 결과 값은 항상 일정해야 함. 그렇지 않으면 roll back을 해야 한다.
- Isolation (격리성) : 한 쪽에서 작업 중이라면, 다른 작업이 끼어들면 안됨.
- Durability (지속성) : 성공적으로 수행된 트랜잭션은 영원히 반영 됨

@CAP
분산 시스템이 보장해야 할 3가지 특성
Consistency : 각각의 사용자가 항상 동일한 데이터를 조회해야 함
Availability : 모든 사용자가 항상 읽고 쓸 수 있음
Partition tolerance : 물리적 네트워크 분산 환경에서 시스템이 잘 동작

-> 실제로는 동시에 만족하는 시스템이 존재하지 않는다.
-> 하나쯤은 포기해야 함.

@NoSQL의 구분
집합 지향 모델
- 키-값 모델
- 문서 모델 (몽고DB)
- 컬럼-패밀리 모델

그래프 모델 - sql 을 사용하지 않고 만든 것
- E-R 다이어그램이랑 유사함
- 각 각의 노드가 하나의 데이터

@RDBMS vs NoSQL
데이터셋 특성	| 대량, 정형데이터 / 초대용량, 비정형데이터
적합한 연산	| 랜덤 액세스, 복잡 연산 / 순차 액세스, 단순 연산
데이터 모델	| 중복제거, 정규화 / No Join, 비정규화
분산시스템 특성	| 일관성, 가용성 / 가용성, 분산처리성
확장성		| 고성능 서버, SQL 최적화 필요 / 저가 서버 추가, 시스템이 확장 지원
적합한 서비스	| 정확성, 일관성 중시, 지속적인 update, 정형데이터 / 증가량이 큰 대용량 기반, 비정형 데이터 위주 웹서비스

@Why MongoDB
1. 범용 데이터베이스
- 다양한 목적의 application에 사용 가능한 범용성을 지니고 있음
2. 유연한 Schema 디자인
- 데이터를 자유자재로 수정할 수 있음
3. 풍부한 기능
- MapReduce, aggregation framework, 등등 다양한 기능을 지원 함
4. 확장성 및 load balancing
- 자동 sharding 기능을 통한 수평적인 확장부터 read, write 확장성을 제공
