컴퓨터공학과 김현철 교수
8월 기계학습 => 기계학습 교수님들의 특강

지능정보?
DIKIW
date, information, knowledge, Intelligence, wisdom
기계가 지능까지 처리할 수 있는 단계가 왔다. 어떻게? 분석

지능정보를 토대로 다양한 예측모델을 만들 것이고, 웹 기반으로 만들 것이다.
사용자가 사용할 수 있게 만드는 것이 첫번째 목표.
==================================
2,3주차 - data수집, 처리 하둡, 스파크, 엘라스틱
4주차 웹 기반 시스템 개발 - 플라스크
5,6주차 - 데이터 분석
머신러닝, 텐서플로우, 파이토치, 판다스
==================================
매일 1,2시간씩 과제 풀이, 복습 문제 위주
실습 위주로 수업 진행

1,2,3주차 - 개인 프로젝트
4주차 - 팀 프로젝트 (플라스크) + 역할분담

개인 별 5가지 패턴 분석을 할 수 있어야함
==================================
@python -4일
함수형 프로그래밍 기법 / 디자인패턴 배울 거임

왜 python?
- 생산성 -> 효과, 효율
)멀티 패러다임
- 프로그래밍 언어 -> 명령형 언어 / 선언형 언어
- glue language : 어디에든 잘 붙는다.
- 12만개의 라이브러리가 존재한다.
- 의존성 문제를 해결하기 위한 것이 아나콘다이다.

1,2,3주차 - 주피터노트북을 사용
- 쥴리아 + 파이썬 + R = jupyter
- ipyhton 기반
- 색을 잘 봐라
- esc를 누를때 파란색으로 바뀜 => 명령형 모드 ex) vi
- 다시 엔터누르면 초록색으로 바뀜

명령형 모드 단축키
h = 도움말
m = markdown을 통해 노트를 할 수 있음
y = 코드모드
l = 라인넘버 생성
c / p = 카피 테이스트
a = 위에 한 줄 추가
b = 아래에 한 줄 추가

markdown 문법 
- 1 : 점 생김
1. : 아래 전부 다 번호 자동 매김
> : 인용할 때 사용
--- : 밑줄이 한 줄 쳐짐 (영역 구분)

컨트롤+쉬프트+p - 명령형모드로 접근

주피터노트북은 json 데이터로 만들어져있음
html + css 로 나만의 주피터를 꾸밀 수 있음
탭 누르면 자동완성

python 철학 - import this
import antigravity
REPM = 사칙연산 + 승까지 가능
_ = 마지막 out이 반복
dir(a)
- a가 사용할 수 있는 모든 메소드가 출력 됨

도움말
쉬프트 + 탭 = 1번, 2번, 4번 눌렀을 때

__메소드__ = python만의 특징 (파이쏘니? 쏘닉)

숫자 표시 4개 정수(int), 부동소수(float), complex, bool
- 무한대 = python에서 float로 취급함

문자열은 3개 str, bytes, bytes array
얘네는 sequence type이다.
sequence type은 무엇이냐? 문자열을 입력하면 순서대로 저장된다.

기본적인 컨테이너 4개
- sequence한 애가 2개 indexing과 slicing이 됨
- 똑같은 데이터 타입이 되야하는 문자형 3가지
- 데이터 타입은 상관 없어 list / tuple
>a=[3,1,"졸려"]
>type(a) = list
>b=(3,1,"졸립다")
>type(b) = tuple

>c={'a':3,'b':1}
>type(c)=dict
>d={1,2,3,'a'}
>type(d)=set
>e={}
>type(e)=dict

>c['a']=3

set = 순서 없고 중복이 없이 출력이 된다.
dictionary = key, value로 접근할 때 사용 (해쉬, 맵 같음)
======================================
12시 반 수업
%who = ipython 문법
자신이 작업하고 있는 공간 (워크스페이스)에서 정의한 변수들
%whos = 더 정확함
%who_ls = list형식으로 나옴

id(a) - 주소값이 저장됨

mutable - 변경가능
imutable - 새로운 값을 할당하면 메모리에 다른 값을 할당해줌
숫자 정수형의 경우 -512~512까지 캐시가 되있어서 메모리에 같은 값을 할당한다.
id 값이 imutable값은 원래 달라짐
===> 가비지컬렉션 개념임
참조카운트..?
파이썬은 모든게 객체이다. 모듈도 객체고 숫자도 객체야
python에서는 overflow가 없다.
sys.maxsize하면 정수의 최대수 표현할 수 있음
- 오버플로우가 없는 언어 = arbitary precision
- 최대크기보다 크면 자동으로 메모리를 늘려서 잡아줘
- 대신 실행속도가 느려짐 체크할 것이 많기 때문에

0.1+0.1+0.1 = 0.3000000000000004 ?
부동소수점 이슈
from decimal import Decimal
a=Decimal('0.2')
b=Decimal('0.1')
c=a+b
c.__str__() = '0.3'
c.__repr__() = "Decimal('0.3')"
보통은 같음. 다를때는 print를 써라
=> print(c)

f=1
sys.getrefcount(f) = 2292
f=1000
sys.getrefcount(f) = 2

reference가 0이되면 가비지컬렉션이 됨

mutable은 값이 추가되도 메모리 상의 지점은 바뀌지 않는다
=================================
mutable 4 = bytearray, list, set, dictionary
문자열타입 3
시퀀스 6 = str, byte, bytearray, list, tuple, range
시퀀스가아닌애 = int형 4가지, set, frozenset, dictionary

iterable 9 = 문자열 3개, list, tuple, set, frozenset, dictionary, range

=> 왜 알고있어야 함?
for a in (iterable 한 것) 
=================================
python은 기본적으로 왼쪽에서 오른쪽으로 계산을 한다.

구문
 - 컴퓨터가 수행해야 하는 하나의 단일 작업
 - 할당, 대입 = python에서는 '바인딩'이라는 표현을 씀. 어떤 값에 이름을 붙이는 작업
 - 선언, 정의 = 함수하고 클래스만 선언한다. 변수는 선언x

문법
- 키워드(규칙) 수가 적다
- 대소문자를 구분한다. (예외, complex의 j사용 ...)
- space sensitive / indentation 
- 숫자도 객체이다.
- 1 .__str__()   (띄어쓰기 꼭)

주석
- # 기본 주석
- #! 얘는 주석이 아님. 유닉스 기반으로 만들 때

할당 연산자
packing / unpacking 기법이 있음 (고오급)

python 에서는 a++이 없고 ++a만 된다.
하지만, 의미는 ++a는 단순히 부호나타내는 연산자 중복임

python에서는 변수명을 붙이는 가이드라인이 있음
MoonIsBeautiful = 파스칼방식, 가장 클래식한 방식
moonIsBeautiful = camel방식, 잘안씀
moon_Is_beatuful = snake방식

문자끼리 비교가 됨, 아스키 코드 값으로 할당이 되는 것임
ord(a) 로 값을 확인할 수 있음

list의 특징 3가지
1. sequence
2. mutable
3. iterable

str
1. sequence
2. immutable
3. iterable

tuple
- 처음 생성하고 변하지 않기 때문에 리스트보다 속도가 빠름
- DB의 레코드 영역으로 사용한다.

packing, unpacking 기법
>*a,b=1,2,3,4,5
>a=[1,2,3,4], b=5
- *는 나머지라고 생각하면 됨

==는 값만 비교,
is는 메모리까지 비교한다.
a == b
a is b / a is not b

list,tuple 비교시에는, 첫번째부터 비교해서 같으면 두번째, 그다음으로 쭉 가서 비교를 한다.

멤버쉽 연산자 in 뒤에는 iterable 한 것이 들어와야 함 
4 not in [1,2,3,]
3 not in {1,2,3,}
하지만 set의 경우, 키만 체크함
1 in {1:'aa', 'b':3} => True
'aa' in {1:'aa', 'b':3} => False
